name: PyInstaller CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: write

jobs:
  build-on-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with pyinstaller
        run: |
          pyinstaller --onefile src\\main.py --clean -n "SpeedTest-Monit"

      - uses: actions/upload-artifact@v2
        with:
          name: app_windows
          path: .\dist\SpeedTest-Monit.exe

  build-on-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with pyinstaller
        run: |
          pyinstaller --onefile src/main.py --clean -n "SpeedTest-Monit"

      - uses: actions/upload-artifact@v2
        with:
          name: app_linux
          path: ./dist/SpeedTest-Monit

  create-release:
    runs-on: ubuntu-latest
    needs: [build-on-windows, build-on-linux]

    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./

      - name: Determine next version tag
        id: tag
        uses: actions/github-script@v6
        with:
          script: |
            const tags = await github.paginate('GET /repos/{owner}/{repo}/tags', {
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            let version;
            if (tags.length === 0) {
              version = 'v0.0.1';
            } else {
              const latestTag = tags[0].name;
              const [major, minor, patch] = latestTag.replace('v', '').split('.').map(Number);
              version = `v${major}.${minor}.${patch + 1}`;
            }

            core.setOutput('next_tag', version);
        outputs:
          next_tag: next_tag

      - name: Create github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          release_name: Release Version ${{ steps.tag.outputs.next_tag }}
          draft: false
          prerelease: false

      - name: Upload windows artifact to github release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app_windows/SpeedTest-Monit.exe
          asset_name: SpeedTest-Monit-windows.exe
          asset_content_type: application

      - name: Upload linux artifact to github release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app_linux/SpeedTest-Monit
          asset_name: SpeedTest-Monit-linux
          asset_content_type: application
